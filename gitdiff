diff --git a/src/lib/server/account.js b/src/lib/server/account.js
index 5a7fcfe..19eea00 100644
--- a/src/lib/server/account.js
+++ b/src/lib/server/account.js
@@ -1,12 +1,15 @@
 import { error } from '@sveltejs/kit';
+import bcrypt from 'bcrypt';
 
-export async function register(request, cookies, locals) {
-	let errors = {};
-
+export async function getFormData(request) {
 	const formData = await request.formData();
 	const username = String(formData.get('username'));
 	const password = String(formData.get('password'));
+	return { username, password };
+}
 
+export function checkFormFields(username, password) {
+	let errors = {};
 	if (!username || typeof username !== 'string') {
 		errors.username = 'Username is required';
 	}
@@ -15,19 +18,40 @@ export async function register(request, cookies, locals) {
 		errors.password = 'Password is required';
 	}
 
+	return errors;
+}
+
+export function throwErrors(errors) {
 	if (Object.keys(errors).length) {
 		throw error(400, errors);
 	}
+}
+
+export async function hashPassword(password) {
+	const saltRounds = 10;
+
+	try {
+		const hashedPassword = await bcrypt.hash(password, saltRounds);
+		return hashedPassword;
+	} catch (error) {
+		console.error(error);
+	}
+}
+
+export async function createUser(locals, username, hashedPassword) {
+	let errors = {};
 
 	try {
 		await locals.pool.query({
 			text: 'INSERT INTO users (username, password) VALUES ($1, $2)',
-			values: [username, password]
+			values: [username, hashedPassword]
 		});
 	} catch (error) {
 		if (error.code === '23505') {
-			errors.db = 'This username is already taken';
+			errors.db = 'Username is already taken';
 		}
-		throw { status: 400, body: errors };
+		console.error(error);
+	} finally {
+		return errors;
 	}
 }
diff --git a/src/routes/register/+page.server.js b/src/routes/register/+page.server.js
index 62b6045..4ee0a30 100644
--- a/src/routes/register/+page.server.js
+++ b/src/routes/register/+page.server.js
@@ -1,10 +1,23 @@
-import { register } from '$lib/server/account';
-import { fail, redirect } from '@sveltejs/kit';
+import { redirect, error, fail } from '@sveltejs/kit';
+import {
+	getFormData,
+	checkFormFields,
+	hashPassword,
+	createUser,
+	throwErrors
+} from '../../lib/server/account.js';
 
 export const actions = {
-	default: async ({ cookies, request, locals }) => {
+	default: async ({ request, locals }) => {
 		try {
-			await register(request, cookies, locals);
+			let errors = {};
+
+			const { username, password } = await getFormData(request);
+			errors = checkFormFields(username, password);
+			throwErrors(errors);
+			const hashedPasword = await hashPassword(password);
+			errors = await createUser(locals, username, hashedPasword);
+			throwErrors(errors);
 		} catch (error) {
 			return fail(400, error.body);
 		}
